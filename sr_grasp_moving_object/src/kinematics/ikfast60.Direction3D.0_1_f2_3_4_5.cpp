/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-09-06 06:52:43.042695
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20;
x0=IKsin(j[0]);
x1=IKcos(j[3]);
x2=IKcos(j[0]);
x3=IKsin(j[3]);
x4=IKsin(j[1]);
x5=IKsin(j[2]);
x6=IKcos(j[1]);
x7=IKcos(j[2]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((IkReal(0.707106781186548))*(x3));
x11=((IkReal(1.00000000000000))*(x2));
x12=((IkReal(0.707106781186548))*(x1));
x13=((IkReal(1.00000000000000))*(x0));
x14=((x4)*(x5));
x15=((x6)*(x7));
x16=((x4)*(x7));
x17=((x5)*(x6));
x18=((x11)*(x15));
x19=((x13)*(x15));
x20=((((IkReal(0.707106781186548))*(x17)))+(((IkReal(0.707106781186548))*(x16))));
IkReal x21=((IkReal(1.00000000000000))*(x11));
eerot[0]=((((x8)*(((((IkReal(-1.00000000000000))*(x16)*(x21)))+(((IkReal(-1.00000000000000))*(x17)*(x21)))))))+(((IkReal(-1.00000000000000))*(x9)*(((((x12)*(((((IkReal(-1.00000000000000))*(x18)))+(((x14)*(x2)))))))+(((x0)*(x12)))+(((x0)*(x10)))+(((x10)*(((((IkReal(-1.00000000000000))*(x14)*(x21)))+(x18))))))))));
IkReal x22=((IkReal(1.00000000000000))*(x13));
eerot[1]=((((x9)*(((((IkReal(-1.00000000000000))*(x12)*(((((x0)*(x14)))+(((IkReal(-1.00000000000000))*(x19)))))))+(((x10)*(x2)))+(((x12)*(x2)))+(((IkReal(-1.00000000000000))*(x10)*(((((IkReal(-1.00000000000000))*(x14)*(x22)))+(x19)))))))))+(((x8)*(((((IkReal(-1.00000000000000))*(x16)*(x22)))+(((IkReal(-1.00000000000000))*(x17)*(x22))))))));
eerot[2]=((((x9)*(((((x1)*(x20)))+(((IkReal(-1.00000000000000))*(x20)*(x3)))))))+(((x8)*(((((IkReal(-1.00000000000000))*(x14)))+(x15))))));
}

IKFAST_API int GetNumFreeParameters() { return 4; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2, 3, 4, 5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x23000004; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]);
j3=pfree[1]; cj3=cos(pfree[1]); sj3=sin(pfree[1]);
j4=pfree[2]; cj4=cos(pfree[2]); sj4=sin(pfree[2]);
j5=pfree[3]; cj5=cos(pfree[3]); sj5=sin(pfree[3]);
r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
new_r00=r00;
new_r01=r01;
new_r02=r02;
r00 = new_r00; r01 = new_r01; r02 = new_r02; {
IkReal dummyeval[1];
dummyeval[0]=(((r00)*(r00))+((r01)*(r01)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((r00)*(r00))+((r01)*(r01)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x23=(sj2)*(sj2);
IkReal x24=(cj4)*(cj4);
IkReal x25=(cj2)*(cj2);
IkReal x26=(sj3)*(sj3);
IkReal x27=(cj3)*(cj3);
IkReal x28=(sj4)*(sj4);
IkReal x29=((IkReal(2.00000000000000))*(cj3)*(sj3));
IkReal x30=((IkReal(2.00000000000000))*(x28));
IkReal x31=((x23)*(x24));
IkReal x32=((x24)*(x25));
dummyeval[0]=((((x27)*(x32)))+(((x27)*(x31)))+(((IkReal(-1.00000000000000))*(x29)*(x32)))+(((IkReal(-1.00000000000000))*(x29)*(x31)))+(((x23)*(x30)))+(((x26)*(x31)))+(((x26)*(x32)))+(((x25)*(x30))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x33=((IkReal(0.707106781186548))*(cj4));
IkReal x34=((((cj2)*(sj4)))+(((cj3)*(sj2)*(x33)))+(((IkReal(-1.00000000000000))*(sj2)*(sj3)*(x33))));
IkReal x35=((((cj2)*(cj3)*(x33)))+(((IkReal(-1.00000000000000))*(sj2)*(sj4)))+(((IkReal(-1.00000000000000))*(cj2)*(sj3)*(x33))));
if( IKabs(x34) < IKFAST_ATAN2_MAGTHRESH && IKabs(x35) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x36=((IkReal(1.00000000000000))*(IKatan2(x34, x35)));
if( ((((x34)*(x34))+((x35)*(x35)))) < (IkReal)-0.00001 )
    continue;
if( (((r02)*(((IKabs(IKabs(IKsqrt((((x34)*(x34))+((x35)*(x35)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x34)*(x34))+((x35)*(x35))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((r02)*(((IKabs(IKabs(IKsqrt((((x34)*(x34))+((x35)*(x35)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x34)*(x34))+((x35)*(x35))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x37=IKasin(((r02)*(((IKabs(IKabs(IKsqrt((((x34)*(x34))+((x35)*(x35)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x34)*(x34))+((x35)*(x35))))))):(IkReal)1.0e30))));
j1array[0]=((((IkReal(-1.00000000000000))*(x36)))+(x37));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x37)))+(((IkReal(-1.00000000000000))*(x36))));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((sj1)*((r01)*(r01))))+(((sj1)*((r00)*(r00))))));
dummyeval[0]=((((sj1)*((r01)*(r01))))+(((sj1)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x38=((IkReal(0.707106781186548))*(cj4)*(sj2));
IkReal x39=((((cj2)*(sj4)))+(((cj3)*(x38)))+(((IkReal(-1.00000000000000))*(r02)))+(((IkReal(-1.00000000000000))*(sj3)*(x38))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x39;
evalcond[2]=x39;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign((((r00)*(r00))+((r01)*(r01))));
dummyeval[0]=(((r00)*(r00))+((r01)*(r01)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x40=((cj2)*(sj3));
IkReal x41=((cj2)*(cj3));
IkReal x42=((IkReal(0.707106781186548))*(cj4)*(r01));
IkReal x43=((IkReal(1.00000000000000))*(sj2)*(sj4));
IkReal x44=((IkReal(0.707106781186548))*(cj4)*(r00));
if( IKabs(((gconst1)*(((((x41)*(x42)))+(((IkReal(-1.00000000000000))*(r01)*(x43)))+(((IkReal(-1.00000000000000))*(x40)*(x42)))+(((IkReal(-1.00000000000000))*(cj3)*(x44)))+(((IkReal(-1.00000000000000))*(sj3)*(x44))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x41)*(x44)))+(((IkReal(-1.00000000000000))*(r00)*(x43)))+(((cj3)*(x42)))+(((IkReal(-1.00000000000000))*(x40)*(x44)))+(((sj3)*(x42))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst1)*(((((x41)*(x42)))+(((IkReal(-1.00000000000000))*(r01)*(x43)))+(((IkReal(-1.00000000000000))*(x40)*(x42)))+(((IkReal(-1.00000000000000))*(cj3)*(x44)))+(((IkReal(-1.00000000000000))*(sj3)*(x44)))))), ((gconst1)*(((((x41)*(x44)))+(((IkReal(-1.00000000000000))*(r00)*(x43)))+(((cj3)*(x42)))+(((IkReal(-1.00000000000000))*(x40)*(x44)))+(((sj3)*(x42)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x45=IKcos(j0);
IkReal x46=IKsin(j0);
IkReal x47=((IkReal(1.00000000000000))*(r01));
IkReal x48=((IkReal(1.00000000000000))*(sj2)*(sj4));
IkReal x49=((IkReal(1.00000000000000))*(x45));
IkReal x50=((IkReal(0.707106781186548))*(cj3)*(cj4));
IkReal x51=((IkReal(0.707106781186548))*(cj4)*(sj3));
IkReal x52=((cj2)*(x45));
IkReal x53=((cj2)*(x46));
evalcond[0]=((((r00)*(x46)))+(((IkReal(-1.00000000000000))*(x45)*(x47)))+(x51)+(x50));
evalcond[1]=((((cj2)*(x50)))+(((IkReal(-1.00000000000000))*(x48)))+(((IkReal(-1.00000000000000))*(r00)*(x49)))+(((IkReal(-1.00000000000000))*(cj2)*(x51)))+(((IkReal(-1.00000000000000))*(x46)*(x47))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x51)*(x52)))+(((IkReal(-1.00000000000000))*(r00)))+(((IkReal(-1.00000000000000))*(x45)*(x48)))+(((IkReal(-1.00000000000000))*(x46)*(x51)))+(((IkReal(-1.00000000000000))*(x46)*(x50)))+(((x50)*(x52))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x51)*(x53)))+(((IkReal(-1.00000000000000))*(x47)))+(((x45)*(x51)))+(((x45)*(x50)))+(((x50)*(x53)))+(((IkReal(-1.00000000000000))*(x46)*(x48))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x54=((cj2)*(sj4));
IkReal x55=((IkReal(0.707106781186548))*(cj4)*(sj2));
IkReal x56=((sj3)*(x55));
IkReal x57=((cj3)*(x55));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((x54)+(x57)+(r02)+(((IkReal(-1.00000000000000))*(x56))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)))+(x56)+(((IkReal(-1.00000000000000))*(x57)))+(((IkReal(-1.00000000000000))*(x54))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(-1.00000000000000))*((r00)*(r00))))+(((IkReal(-1.00000000000000))*((r01)*(r01))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((r00)*(r00))))+(((IkReal(-1.00000000000000))*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x58=((cj2)*(sj3));
IkReal x59=((cj2)*(cj3));
IkReal x60=((IkReal(0.707106781186548))*(cj4)*(r01));
IkReal x61=((IkReal(1.00000000000000))*(sj2)*(sj4));
IkReal x62=((IkReal(0.707106781186548))*(cj4)*(r00));
if( IKabs(((gconst2)*(((((sj3)*(x62)))+(((x59)*(x60)))+(((IkReal(-1.00000000000000))*(r01)*(x61)))+(((IkReal(-1.00000000000000))*(x58)*(x60)))+(((cj3)*(x62))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((x59)*(x62)))+(((IkReal(-1.00000000000000))*(x58)*(x62)))+(((IkReal(-1.00000000000000))*(r00)*(x61)))+(((IkReal(-1.00000000000000))*(sj3)*(x60)))+(((IkReal(-1.00000000000000))*(cj3)*(x60))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst2)*(((((sj3)*(x62)))+(((x59)*(x60)))+(((IkReal(-1.00000000000000))*(r01)*(x61)))+(((IkReal(-1.00000000000000))*(x58)*(x60)))+(((cj3)*(x62)))))), ((gconst2)*(((((x59)*(x62)))+(((IkReal(-1.00000000000000))*(x58)*(x62)))+(((IkReal(-1.00000000000000))*(r00)*(x61)))+(((IkReal(-1.00000000000000))*(sj3)*(x60)))+(((IkReal(-1.00000000000000))*(cj3)*(x60)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x63=IKsin(j0);
IkReal x64=IKcos(j0);
IkReal x65=((sj2)*(sj4));
IkReal x66=((IkReal(1.00000000000000))*(r01));
IkReal x67=((IkReal(0.707106781186548))*(cj3)*(cj4));
IkReal x68=((IkReal(0.707106781186548))*(cj4)*(sj3));
IkReal x69=((cj2)*(x64));
IkReal x70=((cj2)*(x63));
evalcond[0]=((((r00)*(x63)))+(x67)+(x68)+(((IkReal(-1.00000000000000))*(x64)*(x66))));
evalcond[1]=((((r01)*(x63)))+(((r00)*(x64)))+(((IkReal(-1.00000000000000))*(cj2)*(x68)))+(((cj2)*(x67)))+(((IkReal(-1.00000000000000))*(x65))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)))+(((IkReal(-1.00000000000000))*(x67)*(x69)))+(((x68)*(x69)))+(((x64)*(x65)))+(((IkReal(-1.00000000000000))*(x63)*(x68)))+(((IkReal(-1.00000000000000))*(x63)*(x67))));
evalcond[3]=((((x68)*(x70)))+(((x63)*(x65)))+(((IkReal(-1.00000000000000))*(x67)*(x70)))+(((IkReal(-1.00000000000000))*(x66)))+(((x64)*(x68)))+(((x64)*(x67))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x71=((r01)*(sj3));
IkReal x72=((cj3)*(r00));
IkReal x73=((r00)*(sj3));
IkReal x74=((cj1)*(r02));
IkReal x75=((cj3)*(r01));
IkReal x76=((IkReal(0.707106781186548))*(cj4)*(sj1));
IkReal x77=((IkReal(0.707106781186548))*(cj4)*(sj2));
IkReal x78=((IkReal(1.00000000000000))*(cj2)*(sj4));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(r01)*(x78)))+(((IkReal(-1.00000000000000))*(x72)*(x76)))+(((IkReal(-1.00000000000000))*(x73)*(x76)))+(((r01)*(x74)))+(((x71)*(x77)))+(((IkReal(-1.00000000000000))*(x75)*(x77))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(r00)*(x78)))+(((x75)*(x76)))+(((IkReal(-1.00000000000000))*(x72)*(x77)))+(((x73)*(x77)))+(((r00)*(x74)))+(((x71)*(x76))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(r01)*(x78)))+(((IkReal(-1.00000000000000))*(x72)*(x76)))+(((IkReal(-1.00000000000000))*(x73)*(x76)))+(((r01)*(x74)))+(((x71)*(x77)))+(((IkReal(-1.00000000000000))*(x75)*(x77)))))), ((gconst0)*(((((IkReal(-1.00000000000000))*(r00)*(x78)))+(((x75)*(x76)))+(((IkReal(-1.00000000000000))*(x72)*(x77)))+(((x73)*(x77)))+(((r00)*(x74)))+(((x71)*(x76)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x79=IKsin(j0);
IkReal x80=IKcos(j0);
IkReal x81=((IkReal(1.00000000000000))*(r01));
IkReal x82=((IkReal(1.00000000000000))*(sj1));
IkReal x83=((cj2)*(sj4));
IkReal x84=((IkReal(1.00000000000000))*(r00));
IkReal x85=((sj1)*(sj2));
IkReal x86=((cj1)*(cj2));
IkReal x87=((IkReal(1.00000000000000))*(sj2)*(sj4));
IkReal x88=((IkReal(0.707106781186548))*(cj3)*(cj4));
IkReal x89=((cj1)*(x79));
IkReal x90=((IkReal(0.707106781186548))*(cj4)*(sj3));
IkReal x91=((sj1)*(x80));
IkReal x92=((cj1)*(x80));
evalcond[0]=((((IkReal(-1.00000000000000))*(x80)*(x81)))+(x88)+(x90)+(((r00)*(x79))));
evalcond[1]=((((sj2)*(x88)))+(((IkReal(-1.00000000000000))*(sj2)*(x90)))+(((r00)*(x91)))+(((r01)*(sj1)*(x79)))+(x83)+(((IkReal(-1.00000000000000))*(cj1)*(r02))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x81)*(x89)))+(((IkReal(-1.00000000000000))*(r02)*(x82)))+(((cj2)*(x88)))+(((IkReal(-1.00000000000000))*(x84)*(x92)))+(((IkReal(-1.00000000000000))*(x87)))+(((IkReal(-1.00000000000000))*(cj2)*(x90))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x82)*(x83)))+(((IkReal(-1.00000000000000))*(x80)*(x84)))+(((x86)*(x88)))+(((x85)*(x90)))+(((IkReal(-1.00000000000000))*(x79)*(x81)))+(((IkReal(-1.00000000000000))*(x86)*(x90)))+(((IkReal(-1.00000000000000))*(cj1)*(x87)))+(((IkReal(-1.00000000000000))*(x85)*(x88))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x80)*(x86)*(x90)))+(((IkReal(-1.00000000000000))*(x80)*(x82)*(x83)))+(((IkReal(-1.00000000000000))*(x79)*(x88)))+(((IkReal(-1.00000000000000))*(x87)*(x92)))+(((IkReal(-1.00000000000000))*(x79)*(x90)))+(((x80)*(x85)*(x90)))+(((IkReal(-1.00000000000000))*(x84)))+(((x80)*(x86)*(x88)))+(((IkReal(-1.00000000000000))*(x80)*(x85)*(x88))));
evalcond[5]=((((x79)*(x86)*(x88)))+(((x79)*(x85)*(x90)))+(((IkReal(-1.00000000000000))*(x79)*(x86)*(x90)))+(((IkReal(-1.00000000000000))*(x87)*(x89)))+(((IkReal(-1.00000000000000))*(x79)*(x82)*(x83)))+(((x80)*(x88)))+(((x80)*(x90)))+(((IkReal(-1.00000000000000))*(x81)))+(((IkReal(-1.00000000000000))*(x79)*(x85)*(x88))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x93=((IkReal(0.707106781186548))*(cj4));
if( IKabs(((IkReal(-1.00000000000000))*(r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(r00) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x94=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(r01)), r00)));
if( ((((r00)*(r00))+((r01)*(r01)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01))))))):(IkReal)1.0e30))*(((((sj3)*(x93)))+(((cj3)*(x93))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01))))))):(IkReal)1.0e30))*(((((sj3)*(x93)))+(((cj3)*(x93))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x95=IKasin(((((IKabs(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01))))))):(IkReal)1.0e30))*(((((sj3)*(x93)))+(((cj3)*(x93)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x95)))+(((IkReal(-1.00000000000000))*(x94))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x95)+(((IkReal(-1.00000000000000))*(x94))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign((((((cj0)*(cj0))*((r00)*(r00))))+((((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)))+((r02)*(r02))));
dummyeval[0]=(((((cj0)*(cj0))*((r00)*(r00))))+((((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)))+((r02)*(r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x96=((r01)*(sj0));
IkReal x97=((cj0)*(r00));
IkReal x98=((r02)*(sj3));
IkReal x99=((cj3)*(r02));
IkReal x100=((IkReal(1.00000000000000))*(sj2)*(sj4));
IkReal x101=((IkReal(0.707106781186548))*(cj2)*(cj4));
IkReal x102=((IkReal(0.707106781186548))*(cj4)*(sj2));
IkReal x103=((IkReal(1.00000000000000))*(cj2)*(sj4));
IkReal x104=((x101)*(x96));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x103)*(x96)))+(((IkReal(-1.00000000000000))*(x103)*(x97)))+(((x101)*(x99)))+(((IkReal(-1.00000000000000))*(cj3)*(x102)*(x96)))+(((IkReal(-1.00000000000000))*(cj3)*(x102)*(x97)))+(((sj3)*(x102)*(x97)))+(((sj3)*(x102)*(x96)))+(((IkReal(-1.00000000000000))*(r02)*(x100)))+(((IkReal(-1.00000000000000))*(x101)*(x98))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(sj3)*(x104)))+(((IkReal(-1.00000000000000))*(x102)*(x98)))+(((cj3)*(x104)))+(((x102)*(x99)))+(((cj3)*(x101)*(x97)))+(((cj2)*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(sj3)*(x101)*(x97)))+(((IkReal(-1.00000000000000))*(x100)*(x96)))+(((IkReal(-1.00000000000000))*(x100)*(x97))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(x103)*(x96)))+(((IkReal(-1.00000000000000))*(x103)*(x97)))+(((x101)*(x99)))+(((IkReal(-1.00000000000000))*(cj3)*(x102)*(x96)))+(((IkReal(-1.00000000000000))*(cj3)*(x102)*(x97)))+(((sj3)*(x102)*(x97)))+(((sj3)*(x102)*(x96)))+(((IkReal(-1.00000000000000))*(r02)*(x100)))+(((IkReal(-1.00000000000000))*(x101)*(x98)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(sj3)*(x104)))+(((IkReal(-1.00000000000000))*(x102)*(x98)))+(((cj3)*(x104)))+(((x102)*(x99)))+(((cj3)*(x101)*(x97)))+(((cj2)*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(sj3)*(x101)*(x97)))+(((IkReal(-1.00000000000000))*(x100)*(x96)))+(((IkReal(-1.00000000000000))*(x100)*(x97)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x105=IKsin(j1);
IkReal x106=IKcos(j1);
IkReal x107=((IkReal(1.00000000000000))*(sj4));
IkReal x108=((IkReal(1.00000000000000))*(r00));
IkReal x109=((IkReal(1.00000000000000))*(r02));
IkReal x110=((r01)*(sj0));
IkReal x111=((cj2)*(x105));
IkReal x112=((cj2)*(x106));
IkReal x113=((IkReal(0.707106781186548))*(cj3)*(cj4));
IkReal x114=((IkReal(0.707106781186548))*(cj4)*(sj3));
IkReal x115=((sj2)*(x105));
IkReal x116=((sj2)*(x106));
evalcond[0]=((((cj2)*(sj4)))+(((sj2)*(x113)))+(((cj0)*(r00)*(x105)))+(((IkReal(-1.00000000000000))*(x106)*(x109)))+(((x105)*(x110)))+(((IkReal(-1.00000000000000))*(sj2)*(x114))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj2)*(x107)))+(((cj2)*(x113)))+(((IkReal(-1.00000000000000))*(cj2)*(x114)))+(((IkReal(-1.00000000000000))*(cj0)*(x106)*(x108)))+(((IkReal(-1.00000000000000))*(x106)*(x110)))+(((IkReal(-1.00000000000000))*(x105)*(x109))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x111)*(x114)))+(((x111)*(x113)))+(((IkReal(-1.00000000000000))*(x107)*(x115)))+(((IkReal(-1.00000000000000))*(x109)))+(((x113)*(x116)))+(((IkReal(-1.00000000000000))*(x114)*(x116)))+(((sj4)*(x112))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x112)*(x114)))+(((x112)*(x113)))+(((x114)*(x115)))+(((IkReal(-1.00000000000000))*(x107)*(x116)))+(((IkReal(-1.00000000000000))*(x107)*(x111)))+(((IkReal(-1.00000000000000))*(x113)*(x115)))+(((IkReal(-1.00000000000000))*(cj0)*(x108)))+(((IkReal(-1.00000000000000))*(x110))));
evalcond[4]=((((cj0)*(x112)*(x113)))+(((IkReal(-1.00000000000000))*(cj0)*(x113)*(x115)))+(((IkReal(-1.00000000000000))*(x108)))+(((IkReal(-1.00000000000000))*(cj0)*(x112)*(x114)))+(((IkReal(-1.00000000000000))*(cj0)*(x107)*(x111)))+(((IkReal(-1.00000000000000))*(cj0)*(x107)*(x116)))+(((cj0)*(x114)*(x115)))+(((IkReal(-1.00000000000000))*(sj0)*(x114)))+(((IkReal(-1.00000000000000))*(sj0)*(x113))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj0)*(x107)*(x111)))+(((IkReal(-1.00000000000000))*(sj0)*(x107)*(x116)))+(((IkReal(-1.00000000000000))*(sj0)*(x112)*(x114)))+(((IkReal(-1.00000000000000))*(r01)))+(((IkReal(-1.00000000000000))*(sj0)*(x113)*(x115)))+(((cj0)*(x113)))+(((cj0)*(x114)))+(((sj0)*(x112)*(x113)))+(((sj0)*(x114)*(x115))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x117=((IkReal(0.707106781186548))*(cj4));
if( IKabs(((IkReal(-1.00000000000000))*(r01))) < IKFAST_ATAN2_MAGTHRESH && IKabs(r00) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x118=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(r01)), r00)));
if( ((((r00)*(r00))+((r01)*(r01)))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01))))))):(IkReal)1.0e30))*(((((cj3)*(x117)))+(((sj3)*(x117))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01))))))):(IkReal)1.0e30))*(((((cj3)*(x117)))+(((sj3)*(x117))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x119=IKasin(((((IKabs(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((r00)*(r00))+((r01)*(r01))))))):(IkReal)1.0e30))*(((((cj3)*(x117)))+(((sj3)*(x117)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x118)))+(((IkReal(-1.00000000000000))*(x119))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x118)))+(x119));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign((((((cj0)*(cj0))*((r00)*(r00))))+((((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)))+((r02)*(r02))));
dummyeval[0]=(((((cj0)*(cj0))*((r00)*(r00))))+((((r01)*(r01))*((sj0)*(sj0))))+(((IkReal(2.00000000000000))*(cj0)*(r00)*(r01)*(sj0)))+((r02)*(r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x120=((r01)*(sj0));
IkReal x121=((cj0)*(r00));
IkReal x122=((r02)*(sj3));
IkReal x123=((cj3)*(r02));
IkReal x124=((IkReal(1.00000000000000))*(sj2)*(sj4));
IkReal x125=((IkReal(0.707106781186548))*(cj2)*(cj4));
IkReal x126=((IkReal(0.707106781186548))*(cj4)*(sj2));
IkReal x127=((IkReal(1.00000000000000))*(cj2)*(sj4));
IkReal x128=((x120)*(x125));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x120)*(x127)))+(((IkReal(-1.00000000000000))*(r02)*(x124)))+(((x123)*(x125)))+(((sj3)*(x121)*(x126)))+(((IkReal(-1.00000000000000))*(x121)*(x127)))+(((IkReal(-1.00000000000000))*(cj3)*(x121)*(x126)))+(((sj3)*(x120)*(x126)))+(((IkReal(-1.00000000000000))*(x122)*(x125)))+(((IkReal(-1.00000000000000))*(cj3)*(x120)*(x126))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x120)*(x124)))+(((IkReal(-1.00000000000000))*(sj3)*(x128)))+(((cj3)*(x128)))+(((IkReal(-1.00000000000000))*(sj3)*(x121)*(x125)))+(((x123)*(x126)))+(((IkReal(-1.00000000000000))*(x121)*(x124)))+(((cj2)*(r02)*(sj4)))+(((cj3)*(x121)*(x125)))+(((IkReal(-1.00000000000000))*(x122)*(x126))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j1array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(x120)*(x127)))+(((IkReal(-1.00000000000000))*(r02)*(x124)))+(((x123)*(x125)))+(((sj3)*(x121)*(x126)))+(((IkReal(-1.00000000000000))*(x121)*(x127)))+(((IkReal(-1.00000000000000))*(cj3)*(x121)*(x126)))+(((sj3)*(x120)*(x126)))+(((IkReal(-1.00000000000000))*(x122)*(x125)))+(((IkReal(-1.00000000000000))*(cj3)*(x120)*(x126)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(x120)*(x124)))+(((IkReal(-1.00000000000000))*(sj3)*(x128)))+(((cj3)*(x128)))+(((IkReal(-1.00000000000000))*(sj3)*(x121)*(x125)))+(((x123)*(x126)))+(((IkReal(-1.00000000000000))*(x121)*(x124)))+(((cj2)*(r02)*(sj4)))+(((cj3)*(x121)*(x125)))+(((IkReal(-1.00000000000000))*(x122)*(x126)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x129=IKsin(j1);
IkReal x130=IKcos(j1);
IkReal x131=((IkReal(1.00000000000000))*(sj4));
IkReal x132=((IkReal(1.00000000000000))*(r00));
IkReal x133=((IkReal(1.00000000000000))*(r02));
IkReal x134=((r01)*(sj0));
IkReal x135=((cj2)*(x129));
IkReal x136=((cj2)*(x130));
IkReal x137=((IkReal(0.707106781186548))*(cj3)*(cj4));
IkReal x138=((IkReal(0.707106781186548))*(cj4)*(sj3));
IkReal x139=((sj2)*(x129));
IkReal x140=((sj2)*(x130));
evalcond[0]=((((cj2)*(sj4)))+(((IkReal(-1.00000000000000))*(sj2)*(x138)))+(((x129)*(x134)))+(((sj2)*(x137)))+(((cj0)*(r00)*(x129)))+(((IkReal(-1.00000000000000))*(x130)*(x133))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(x130)*(x132)))+(((IkReal(-1.00000000000000))*(sj2)*(x131)))+(((cj2)*(x137)))+(((IkReal(-1.00000000000000))*(x130)*(x134)))+(((IkReal(-1.00000000000000))*(cj2)*(x138)))+(((IkReal(-1.00000000000000))*(x129)*(x133))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x135)*(x138)))+(((IkReal(-1.00000000000000))*(x138)*(x140)))+(((x135)*(x137)))+(((x137)*(x140)))+(((IkReal(-1.00000000000000))*(x133)))+(((sj4)*(x136)))+(((IkReal(-1.00000000000000))*(x131)*(x139))));
evalcond[3]=((((x138)*(x139)))+(((IkReal(-1.00000000000000))*(x131)*(x140)))+(((IkReal(-1.00000000000000))*(x137)*(x139)))+(((x136)*(x137)))+(((IkReal(-1.00000000000000))*(x136)*(x138)))+(((IkReal(-1.00000000000000))*(cj0)*(x132)))+(((IkReal(-1.00000000000000))*(x134)))+(((IkReal(-1.00000000000000))*(x131)*(x135))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj0)*(x131)*(x135)))+(((cj0)*(x138)*(x139)))+(((cj0)*(x136)*(x137)))+(((IkReal(-1.00000000000000))*(cj0)*(x136)*(x138)))+(((IkReal(-1.00000000000000))*(x132)))+(((IkReal(-1.00000000000000))*(cj0)*(x137)*(x139)))+(((IkReal(-1.00000000000000))*(sj0)*(x137)))+(((IkReal(-1.00000000000000))*(sj0)*(x138)))+(((IkReal(-1.00000000000000))*(cj0)*(x131)*(x140))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r01)))+(((cj0)*(x137)))+(((cj0)*(x138)))+(((IkReal(-1.00000000000000))*(sj0)*(x137)*(x139)))+(((IkReal(-1.00000000000000))*(sj0)*(x131)*(x135)))+(((sj0)*(x136)*(x137)))+(((IkReal(-1.00000000000000))*(sj0)*(x131)*(x140)))+(((sj0)*(x138)*(x139)))+(((IkReal(-1.00000000000000))*(sj0)*(x136)*(x138))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "15f9e9c62df17dd3ee9187d7c7525d9b"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
