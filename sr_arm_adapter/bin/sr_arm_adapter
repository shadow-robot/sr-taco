#!/usr/bin/env python

import roslib; roslib.load_manifest('sr_arm_adapter')
import rospy
from std_msgs.msg import Float64
from shadowhand_ros import ShadowHand_ROS

class SrArmAdapter(object):
    """Aggregate individual controller messages into single sendupdate message
    published at a fixed rate (sending messages to the arm too fast makes it
    unhappy).
    """
    def __init__(self):
        rospy.init_node('sr_arm_adapter')
        rospy.loginfo("Starting " + rospy.get_name())
        self._rate = rospy.Rate(1) #hz
        self._robot = ShadowHand_ROS()
        self._targets = {
                    'ShoulderJRotate': 0.0,
                    'ShoulderJSwing':  0.0,
                    'ElbowJRotate':    0.0,
                    'ElbowJSwing':     0.0 }
        # TODO: Param for the prefix to use here
        rospy.Subscriber("/sa_sr_position_controller/command", Float64, self._sr_cb);
        rospy.Subscriber("/sa_ss_position_controller/command", Float64, self._ss_cb);
        rospy.Subscriber("/sa_er_position_controller/command", Float64, self._er_cb);
        rospy.Subscriber("/sa_es_position_controller/command", Float64, self._es_cb);

        # Grab the current arm joint pos as we will be sending constant updates
        rospy.sleep(0.2) # time for arm to pub its positions
        if self._robot.has_arm():
            for jname in self._targets:
                val = self._robot.valueof(jname)
                if val != 'NaN':
                    self._targets[jname] = val
        else:
            rospy.logwarn("Arm not found not reading current joint positions")

    def run(self):
        while not rospy.is_shutdown():
            #rospy.loginfo(": %s"%self._targets)
            self._robot.sendupdate_arm_from_dict(self._targets)
            self._rate.sleep()

    def _sr_cb(self, msg):
        """ShoulderJRotate"""
        self._targets["ShoulderJRotate"] = msg.data

    def _ss_cb(self, msg):
        """ShoulderJSwing"""
        self._targets["ShoulderJSwing"] = msg.data

    def _er_cb(self, msg):
        """"ElbowJRotate"""
        self._targets["ElbowJRotate"] = msg.data

    def _es_cb(self, msg):
        """ElbowJSwing"""
        self._targets["ElbowJSwing"] = msg.data


if __name__ == '__main__':
    try:
        node = SrArmAdapter()
        node.run()
    except rospy.ROSInterruptException:
        pass

