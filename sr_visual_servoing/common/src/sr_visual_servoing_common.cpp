//ROS typedefs
#include "ros/ros.h"

/* protected region user include files on begin */
#include "sr_visual_servoing/visual_servoing.hpp"
/* protected region user include files end */

class sr_visual_servoing_config
{
public:

};

class sr_visual_servoing_data
{
// autogenerated: don't touch this class
public:
//input data
  
	
//output data
 

};

class sr_visual_servoing_impl
{
	/* protected region user member variables on begin */
    boost::shared_ptr<sr_taco::VisualServoing> visual_servo_;
    sr_visual_servoing::VisualServoingFeedback feedback_;
	/* protected region user member variables end */

public:
    sr_visual_servoing_impl() 
    {
        /* protected region user constructor on begin */
		/* protected region user constructor end */
    }
    void configure(sr_visual_servoing_config config) 
    {
        /* protected region user configure on begin */
		/* protected region user configure end */
    }
    void update(sr_visual_servoing_data &data, sr_visual_servoing_config config)
    {
        /* protected region user update on begin */
		/* protected region user update end */
    }

    
    void callback_visual_servo_(const sr_visual_servoing::VisualServoingGoalConstPtr &goal, actionlib::SimpleActionServer<sr_visual_servoing::VisualServoingAction> *as_)
    {
    	/* protected region user implementation of action callback for visual_servo on begin */
        while( ros::ok() )
        {
          ros::Duration(0.1).sleep();

          feedback_ = visual_servo_->get_closer();
          as_->publishFeedback(feedback_);

          if( !as_->isActive() )
          {
            ROS_DEBUG("ABORTING");
            return;
          }
        }

        //will never reach this point as the goal is infinite
        as_->setSucceeded();

		/* protected region user implementation of action callback for visual_servo end */
    
    }
    


    
    /* protected region user additional functions on begin */
	/* protected region user additional functions end */
    
};
